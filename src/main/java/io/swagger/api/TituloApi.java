/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Accion;
import io.swagger.model.Cliente;
import io.swagger.model.Titulo;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "titulo", description = "the titulo API")
@RequestMapping(value = "/titulo", produces = { "application/json" })
public interface TituloApi {

	@ApiOperation(value = "agregar un nuevo título", nickname = "agregarTitulo", notes = "Agregar un nuevo título", tags={ "administradores", })
	@ApiResponses(value = { 
		@ApiResponse(code = 201, message = "Título creado"),
		@ApiResponse(code = 400, message = "objeto invalido"),
		@ApiResponse(code = 409, message = "ya existe un título con este id") })
	@RequestMapping(value = "/{idTitulo}",
		produces = { "application/json" }, 
		consumes = { "application/json" },
		method = RequestMethod.POST)
	ResponseEntity<Void> agregarTitulo(@ApiParam(value = "id del título a agregar",required=true) @PathVariable("idTitulo") String idTitulo,@ApiParam(value = "título a agregar"  )  @Valid @RequestBody Titulo titulo);


	@ApiOperation(value = "buscar títulos", nickname = "buscarTitulo", notes = "Enviando un id de título devuelve la informacion correspondiente a este ", response = Titulo.class, tags={ "administradores","accionistas", })
	@ApiResponses(value = { 
		@ApiResponse(code = 200, message = "Devuelver el resultado obtenido", response = Titulo.class),
		@ApiResponse(code = 400, message = "parametro incorrecto") })
	@RequestMapping(value = "/{idTitulo}",
		produces = { "application/json" }, 
		method = RequestMethod.GET)
	ResponseEntity<Titulo> buscarTitulo(@ApiParam(value = "id del título a buscar",required=true) @PathVariable("idTitulo") String idTitulo);


	@ApiOperation(value = "eliminar un título", nickname = "eliminarTitulo", notes = "Eliminar un título", tags={ "administradores", })
	@ApiResponses(value = { 
		@ApiResponse(code = 200, message = "Ok"),
		@ApiResponse(code = 400, message = "id de título inválido"),
		@ApiResponse(code = 404, message = "id de título no encontrado") })
	@RequestMapping(value = "/{idTitulo}",
		produces = { "application/json" }, 
		method = RequestMethod.DELETE)
	ResponseEntity<Void> eliminarTitulo(@ApiParam(value = "id del título a eliminar",required=true) @PathVariable("idTitulo") String idTitulo);
	
	@ApiOperation(value = "listar los títulos", nickname = "listarTitulos", notes = "Listar los títulos", tags={ "administradores", })
	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "Devuelver el resultado obtenido", response = List.class),
			@ApiResponse(code = 400, message = "Objeto invalido") })
	@RequestMapping(value = "",
		produces = { "application/json" }, 
		method = RequestMethod.GET)
	@ResponseBody List<Titulo> listarTitulos();
	
}
